#version 430

layout (location = 0) in  vec3 VertexPosition;
layout (location = 1) in  vec3 VertexNormal;
layout (location = 2) in  vec2 VertexTexCoord;
layout (location = 3) in  vec4 VertexTexTangent;

struct LightInfo {
    vec4 Position;  // Light position in eye coords
    vec3 Intensity; // Light intensity
};

uniform LightInfo Light;

out vec3 LightDir;
out vec3 ViewDir;
out vec2 TexCoord;

out vec3 VNormal;
out vec3 VPosition;

uniform mat4 ModelViewMatrix;
uniform mat3 NormalMatrix;
uniform mat4 MVP;                // Projection * Modelview

void main()
{
    // Convert normal, position and tangent to eye coords.
    VNormal    = normalize(NormalMatrix * VertexNormal);
    VPosition  = vec3(ModelViewMatrix * vec4(VertexPosition, 1.0));
    vec3 Tangent   = normalize(NormalMatrix * vec3(VertexTexTangent));

    // Compute binormal
    vec3 Binormal  = normalize(cross(VNormal, Tangent)) * VertexTexTangent.w;

    // Matrix to transform to tangent space
    mat3 toObjectLocal = mat3(
        Tangent.x, Binormal.x, VNormal.x,
        Tangent.y, Binormal.y, VNormal.y,
        Tangent.z, Binormal.z, VNormal.z
    );

    // Transform Lightdir & Viewdir to tangent space
    LightDir  = normalize(toObjectLocal * (Light.Position.xyz - VPosition));
    ViewDir   = toObjectLocal * normalize(-VPosition);

    TexCoord  = VertexTexCoord;

    gl_Position = MVP * vec4(VertexPosition, 1.0);
}
