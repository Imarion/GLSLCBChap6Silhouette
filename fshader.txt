#version 430

in vec3 GNormal;
in vec3 GPosition;

flat in int GIsEdge;

layout (binding=0) uniform sampler2D ColorTex;
layout (binding=1) uniform sampler2D NormalMapTex;

struct LightInfo {
    vec4 Position;  // Light position in eye coords
    vec3 Intensity; // Light intensity
};

uniform LightInfo Light;

struct MaterialInfo {
    vec3  Ka;        // Ambient  reflectivity
    vec3  Kd;        // Diffuse  reflectivity
    vec3  Ks;        // Specular reflectivity
    float Shininess; // Specular shininess factor
};

uniform MaterialInfo Material;

out vec4 FragColor;

const int levels = 3;
const float scaleFactor = 1.0 / levels;

vec3 toonShade( )
{
    vec3 s = normalize( Light.Position.xyz - GPosition.xyz );
    vec3 ambient = Material.Ka;
    float cosine = dot( s, GNormal );
    vec3 diffuse = Material.Kd * ceil( cosine * levels ) * scaleFactor;

    return Light.Intensity * (ambient + diffuse);
}


void main()
{
    vec4 LineColor = vec4(0.05f, 0.0f, 0.05f, 1.0f);

    if( GIsEdge == 1 ) {
        FragColor = LineColor;
        //FragColor = vec4(1.0f, 0.0f, 0.0f, 0.0f);
    } else {
        FragColor =  vec4( toonShade(), 1.0 );
        //FragColor = vec4(0.0f, 1.0f, 0.0f, 0.0f);
    }

    //FragColor = vec4(0.0f, 1.0f, 0.0f, 0.0f);
}
